// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/currency_rate/repository.go

// Package mock_currency_rate is a generated GoMock package.
package mock_currency_rate

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "gitlab.ozon.dev/paksergey94/telegram-bot/internal/model"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetRateByCurrency mocks base method.
func (m *MockRepository) GetRateByCurrency(ctx context.Context, currency string) (*model.CurrencyRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateByCurrency", ctx, currency)
	ret0, _ := ret[0].(*model.CurrencyRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRateByCurrency indicates an expected call of GetRateByCurrency.
func (mr *MockRepositoryMockRecorder) GetRateByCurrency(ctx, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateByCurrency", reflect.TypeOf((*MockRepository)(nil).GetRateByCurrency), ctx, currency)
}

// SaveRate mocks base method.
func (m *MockRepository) SaveRate(ctx context.Context, name string, value int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRate", ctx, name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRate indicates an expected call of SaveRate.
func (mr *MockRepositoryMockRecorder) SaveRate(ctx, name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRate", reflect.TypeOf((*MockRepository)(nil).SaveRate), ctx, name, value)
}
