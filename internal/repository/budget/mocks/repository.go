// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/budget/repository.go

// Package mock_budget is a generated GoMock package.
package mock_budget

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "gitlab.ozon.dev/paksergey94/telegram-bot/internal/model"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetBudgetTx mocks base method.
func (m *MockRepository) GetBudgetTx(tx *sql.Tx, ctx context.Context, userId int64) (*model.Budget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBudgetTx", tx, ctx, userId)
	ret0, _ := ret[0].(*model.Budget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBudgetTx indicates an expected call of GetBudgetTx.
func (mr *MockRepositoryMockRecorder) GetBudgetTx(tx, ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBudgetTx", reflect.TypeOf((*MockRepository)(nil).GetBudgetTx), tx, ctx, userId)
}

// SaveBudget mocks base method.
func (m *MockRepository) SaveBudget(ctx context.Context, userId, limit int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBudget", ctx, userId, limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBudget indicates an expected call of SaveBudget.
func (mr *MockRepositoryMockRecorder) SaveBudget(ctx, userId, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBudget", reflect.TypeOf((*MockRepository)(nil).SaveBudget), ctx, userId, limit)
}
