// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/spend/cache/repository.go

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	model "gitlab.ozon.dev/paksergey94/telegram-bot/internal/model"
)

// MockSpendRepo is a mock of SpendRepo interface.
type MockSpendRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSpendRepoMockRecorder
}

// MockSpendRepoMockRecorder is the mock recorder for MockSpendRepo.
type MockSpendRepoMockRecorder struct {
	mock *MockSpendRepo
}

// NewMockSpendRepo creates a new mock instance.
func NewMockSpendRepo(ctrl *gomock.Controller) *MockSpendRepo {
	mock := &MockSpendRepo{ctrl: ctrl}
	mock.recorder = &MockSpendRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpendRepo) EXPECT() *MockSpendRepoMockRecorder {
	return m.recorder
}

// DeleteForUser mocks base method.
func (m *MockSpendRepo) DeleteForUser(ctx context.Context, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteForUser", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteForUser indicates an expected call of DeleteForUser.
func (mr *MockSpendRepoMockRecorder) DeleteForUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForUser", reflect.TypeOf((*MockSpendRepo)(nil).DeleteForUser), ctx, userId)
}

// GetByTimeSince mocks base method.
func (m *MockSpendRepo) GetByTimeSince(ctx context.Context, userId int64, timeSince time.Time) ([]model.Spend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTimeSince", ctx, userId, timeSince)
	ret0, _ := ret[0].([]model.Spend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTimeSince indicates an expected call of GetByTimeSince.
func (mr *MockSpendRepoMockRecorder) GetByTimeSince(ctx, userId, timeSince interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTimeSince", reflect.TypeOf((*MockSpendRepo)(nil).GetByTimeSince), ctx, userId, timeSince)
}

// Save mocks base method.
func (m *MockSpendRepo) Save(ctx context.Context, userId int64, timeSince time.Time, spends []model.Spend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, userId, timeSince, spends)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSpendRepoMockRecorder) Save(ctx, userId, timeSince, spends interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSpendRepo)(nil).Save), ctx, userId, timeSince, spends)
}
