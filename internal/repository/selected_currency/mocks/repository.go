// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/selected_currency/repository.go

// Package mock_selected_currency is a generated GoMock package.
package mock_selected_currency

import (
	"reflect"

	"github.com/golang/mock/gomock"
	selected_currency "gitlab.ozon.dev/paksergey94/telegram-bot/internal/model"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetSelectedCurrency mocks base method.
func (m *MockRepository) GetSelectedCurrency(userId int64) (selected_currency.SelectedCurrency, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelectedCurrency", userId)
	ret0, _ := ret[0].(selected_currency.SelectedCurrency)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelectedCurrency indicates an expected call of GetSelectedCurrency.
func (mr *MockRepositoryMockRecorder) GetSelectedCurrency(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelectedCurrency", reflect.TypeOf((*MockRepository)(nil).GetSelectedCurrency), userId)
}

// SaveSelectedCurrency mocks base method.
func (m *MockRepository) SaveSelectedCurrency(currency string, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSelectedCurrency", currency, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSelectedCurrency indicates an expected call of SaveSelectedCurrency.
func (mr *MockRepositoryMockRecorder) SaveSelectedCurrency(currency, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSelectedCurrency", reflect.TypeOf((*MockRepository)(nil).SaveSelectedCurrency), currency, userId)
}
