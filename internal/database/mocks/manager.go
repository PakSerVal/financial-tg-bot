// Code generated by MockGen. DO NOT EDIT.
// Source: internal/database/manager.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSqlManager is a mock of SqlManager interface.
type MockSqlManager struct {
	ctrl     *gomock.Controller
	recorder *MockSqlManagerMockRecorder
}

// MockSqlManagerMockRecorder is the mock recorder for MockSqlManager.
type MockSqlManagerMockRecorder struct {
	mock *MockSqlManager
}

// NewMockSqlManager creates a new mock instance.
func NewMockSqlManager(ctrl *gomock.Controller) *MockSqlManager {
	mock := &MockSqlManager{ctrl: ctrl}
	mock.recorder = &MockSqlManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSqlManager) EXPECT() *MockSqlManagerMockRecorder {
	return m.recorder
}

// InTransaction mocks base method.
func (m *MockSqlManager) InTransaction(ctx context.Context, callback func(*sql.Tx, context.Context) (bool, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InTransaction", ctx, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// InTransaction indicates an expected call of InTransaction.
func (mr *MockSqlManagerMockRecorder) InTransaction(ctx, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InTransaction", reflect.TypeOf((*MockSqlManager)(nil).InTransaction), ctx, callback)
}
