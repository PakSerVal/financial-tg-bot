// Code generated by MockGen. DO NOT EDIT.
// Source: internal/clients/tg/tgclient.go

// Package mock_tg is a generated GoMock package.
package mock_tg

import (
	reflect "reflect"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	gomock "github.com/golang/mock/gomock"
	model "gitlab.ozon.dev/paksergey94/telegram-bot/internal/model"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetUpdatesChan mocks base method.
func (m *MockClient) GetUpdatesChan() tgbotapi.UpdatesChannel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdatesChan")
	ret0, _ := ret[0].(tgbotapi.UpdatesChannel)
	return ret0
}

// GetUpdatesChan indicates an expected call of GetUpdatesChan.
func (mr *MockClientMockRecorder) GetUpdatesChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdatesChan", reflect.TypeOf((*MockClient)(nil).GetUpdatesChan))
}

// SendMessage mocks base method.
func (m *MockClient) SendMessage(msgOut model.MessageOut, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", msgOut, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockClientMockRecorder) SendMessage(msgOut, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockClient)(nil).SendMessage), msgOut, userID)
}

// MockTokenGetter is a mock of TokenGetter interface.
type MockTokenGetter struct {
	ctrl     *gomock.Controller
	recorder *MockTokenGetterMockRecorder
}

// MockTokenGetterMockRecorder is the mock recorder for MockTokenGetter.
type MockTokenGetterMockRecorder struct {
	mock *MockTokenGetter
}

// NewMockTokenGetter creates a new mock instance.
func NewMockTokenGetter(ctrl *gomock.Controller) *MockTokenGetter {
	mock := &MockTokenGetter{ctrl: ctrl}
	mock.recorder = &MockTokenGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenGetter) EXPECT() *MockTokenGetterMockRecorder {
	return m.recorder
}

// Token mocks base method.
func (m *MockTokenGetter) Token() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token")
	ret0, _ := ret[0].(string)
	return ret0
}

// Token indicates an expected call of Token.
func (mr *MockTokenGetterMockRecorder) Token() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockTokenGetter)(nil).Token))
}
