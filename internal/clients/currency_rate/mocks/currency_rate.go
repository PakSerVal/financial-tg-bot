// Code generated by MockGen. DO NOT EDIT.
// Source: internal/clients/currency_rate/currency_rate.go

// Package mock_currency_rate is a generated GoMock package.
package mock_currency_rate

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	currency_rate "gitlab.ozon.dev/paksergey94/telegram-bot/internal/clients/currency_rate"
)

// MockCurrencyRateApiClient is a mock of CurrencyRateApiClient interface.
type MockCurrencyRateApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyRateApiClientMockRecorder
}

// MockCurrencyRateApiClientMockRecorder is the mock recorder for MockCurrencyRateApiClient.
type MockCurrencyRateApiClientMockRecorder struct {
	mock *MockCurrencyRateApiClient
}

// NewMockCurrencyRateApiClient creates a new mock instance.
func NewMockCurrencyRateApiClient(ctrl *gomock.Controller) *MockCurrencyRateApiClient {
	mock := &MockCurrencyRateApiClient{ctrl: ctrl}
	mock.recorder = &MockCurrencyRateApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyRateApiClient) EXPECT() *MockCurrencyRateApiClientMockRecorder {
	return m.recorder
}

// GetCurrencyRates mocks base method.
func (m *MockCurrencyRateApiClient) GetCurrencyRates() (map[string]currency_rate.ApiCurrencyRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyRates")
	ret0, _ := ret[0].(map[string]currency_rate.ApiCurrencyRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrencyRates indicates an expected call of GetCurrencyRates.
func (mr *MockCurrencyRateApiClientMockRecorder) GetCurrencyRates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyRates", reflect.TypeOf((*MockCurrencyRateApiClient)(nil).GetCurrencyRates))
}
