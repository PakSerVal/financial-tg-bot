// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/messages/command/spend/spend.go

// Package mock_spend is a generated GoMock package.
package mock_spend

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	spend "gitlab.ozon.dev/paksergey94/telegram-bot/internal/repository/spend"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetByTimeSince mocks base method.
func (m *MockRepository) GetByTimeSince(timeSince time.Time) ([]spend.SpendRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTimeSince", timeSince)
	ret0, _ := ret[0].([]spend.SpendRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTimeSince indicates an expected call of GetByTimeSince.
func (mr *MockRepositoryMockRecorder) GetByTimeSince(timeSince interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTimeSince", reflect.TypeOf((*MockRepository)(nil).GetByTimeSince), timeSince)
}

// Save mocks base method.
func (m *MockRepository) Save(sum int64, category string) (spend.SpendRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", sum, category)
	ret0, _ := ret[0].(spend.SpendRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryMockRecorder) Save(sum, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepository)(nil).Save), sum, category)
}
